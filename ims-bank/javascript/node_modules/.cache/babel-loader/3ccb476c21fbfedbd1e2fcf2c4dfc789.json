{"ast":null,"code":"import _asyncToGenerator from \"/home/anaramirez/Documentos/eng-recruiting/ims-bank/javascript/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/home/anaramirez/Documentos/eng-recruiting/ims-bank/javascript/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/home/anaramirez/Documentos/eng-recruiting/ims-bank/javascript/src/components/Bank.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"/home/anaramirez/Documentos/eng-recruiting/ims-bank/javascript/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport api from '../services/api';\nimport { Column, CellProps } from 'react-table';\nimport { organizeClientsAccounts } from \"../helpers/clients\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var Bank = function Bank() {\n  _s();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var _yield$api$get, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return api.get('transactions.json');\n\n          case 2:\n            _yield$api$get = _context.sent;\n            data = _yield$api$get.data;\n            setData(data);\n            console.log(\"data\", data);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), []);\n  /*\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"Customer's name\",\n        colSpan: 1,\n        accessor: row => row.currentStep?.stepIdentifier,\n        Cell: ({ row }: CellProps<IContent>) => {\n          const data = row.original;\n           return (\n            <>\n              <Text\n                fontWeight=\"600\"\n                fontSize=\"sm\"\n                color={getContentStatusColor(data as IContent)}\n              >\n                {getContentStatusName(data as IContent)}\n              </Text>\n              {getStatusComplement(data as IContent)}\n            </>\n          );\n        },\n      },\n      {\n        Header: \"Checking account total\",\n        accessor: row => (\n          <Text\n            overflow=\"hidden\"\n            whiteSpace=\"nowrap\"\n            textOverflow=\"ellipsis\"\n            maxWidth=\"70ch\"\n          >\n            {row.metadata.title}\n          </Text>\n        ),\n        colSpan: 2,\n      },\n      {\n        Header: \"Saving account total\",\n        accessor: 'productType',\n        Cell: ({ row }: CellProps<IContent>) => {\n          return getProductTypeName(\n            row.original.productCategory,\n            row.original.productType,\n          );\n        },\n        colSpan: 1,\n      },\n      {\n        Header: \"Total savings + checking account\",\n        accessor: 'productCategory',\n        Cell: ({ row }: CellProps<IContent>) => {\n          return t(`home:products.categories.${row.original.productCategory}.name`);\n        },\n        colSpan: 2,\n      },\n    ],\n    [],\n  );\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Replace this with your summary table\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(Bank, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n\n_c = Bank;\n\nvar _c;\n\n$RefreshReg$(_c, \"Bank\");","map":{"version":3,"sources":["/home/anaramirez/Documentos/eng-recruiting/ims-bank/javascript/src/components/Bank.js"],"names":["React","useEffect","useState","useCallback","api","Column","CellProps","organizeClientsAccounts","Bank","data","setData","get","console","log"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,aAAlC;AACA,SAASC,uBAAT,QAAwC,oBAAxC;;AAEA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AACxB,kBAAwBN,QAAQ,CAAC,EAAD,CAAhC;AAAA;AAAA,MAAOO,IAAP;AAAA,MAAaC,OAAb;;AAEAT,EAAAA,SAAS,wEAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACaG,GAAG,CAACO,GAAJ,CAAQ,mBAAR,CADb;;AAAA;AAAA;AACDF,YAAAA,IADC,kBACDA,IADC;AAERC,YAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,YAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBJ,IAApB;;AAHQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAIN,EAJM,CAAT;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AAED,CAvEM;;GAAMD,I;;KAAAA,I","sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\nimport api from '../services/api';\nimport { Column, CellProps } from 'react-table';\nimport { organizeClientsAccounts } from \"../helpers/clients\";\n\nexport const Bank = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(async () => {\n    const {data} = await api.get('transactions.json');\n    setData(data)\n    console.log(\"data\", data)\n  }, []);\n  /*\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"Customer's name\",\n        colSpan: 1,\n        accessor: row => row.currentStep?.stepIdentifier,\n        Cell: ({ row }: CellProps<IContent>) => {\n          const data = row.original;\n\n          return (\n            <>\n              <Text\n                fontWeight=\"600\"\n                fontSize=\"sm\"\n                color={getContentStatusColor(data as IContent)}\n              >\n                {getContentStatusName(data as IContent)}\n              </Text>\n              {getStatusComplement(data as IContent)}\n            </>\n          );\n        },\n      },\n      {\n        Header: \"Checking account total\",\n        accessor: row => (\n          <Text\n            overflow=\"hidden\"\n            whiteSpace=\"nowrap\"\n            textOverflow=\"ellipsis\"\n            maxWidth=\"70ch\"\n          >\n            {row.metadata.title}\n          </Text>\n        ),\n        colSpan: 2,\n      },\n      {\n        Header: \"Saving account total\",\n        accessor: 'productType',\n        Cell: ({ row }: CellProps<IContent>) => {\n          return getProductTypeName(\n            row.original.productCategory,\n            row.original.productType,\n          );\n        },\n        colSpan: 1,\n      },\n      {\n        Header: \"Total savings + checking account\",\n        accessor: 'productCategory',\n        Cell: ({ row }: CellProps<IContent>) => {\n          return t(`home:products.categories.${row.original.productCategory}.name`);\n        },\n        colSpan: 2,\n      },\n    ],\n    [],\n  );\n*/\n  return <p>Replace this with your summary table</p>;\n\n};\n"]},"metadata":{},"sourceType":"module"}