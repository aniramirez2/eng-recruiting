{"ast":null,"code":"import _objectSpread from \"/home/anaramirez/Documentos/eng-recruiting/ims-bank/javascript/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/anaramirez/Documentos/eng-recruiting/ims-bank/javascript/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/home/anaramirez/Documentos/eng-recruiting/ims-bank/javascript/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/home/anaramirez/Documentos/eng-recruiting/ims-bank/javascript/src/components/Bank.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"/home/anaramirez/Documentos/eng-recruiting/ims-bank/javascript/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport React, { useEffect, useState, useMemo } from \"react\";\nimport api from '../services/api';\nimport { Column, CellProps, useTable } from 'react-table';\nimport { organizeClientsAccounts } from \"../helpers/clients\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nexport var Bank = function Bank() {\n  _s();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      transactions = _useState2[0],\n      setTransactions = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      clients = _useState4[0],\n      setClients = _useState4[1];\n\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var _yield$api$get, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return api.get('transactions.json');\n\n          case 2:\n            _yield$api$get = _context.sent;\n            data = _yield$api$get.data;\n            setTransactions(data);\n            setClients(organizeClientsAccounts(data));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), []);\n  var columns = useMemo(function () {\n    return [{\n      Header: \"Customer's name\",\n      accessor: 'name'\n    }, {\n      Header: \"Checking account total\",\n      accessor: 'checking'\n    }, {\n      Header: \"Saving account total\",\n      accessor: 'saving'\n    }];\n  }, []);\n\n  var _useTable = useTable({\n    columns: columns,\n    data: clients\n  }),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      page = _useTable.page;\n\n  return /*#__PURE__*/_jsxDEV(\"table\", _objectSpread(_objectSpread({}, getTableProps()), {}, {\n    children: [headerGroups.map(function (headerGroup) {\n      return /*#__PURE__*/_createElement(\"thead\", _objectSpread(_objectSpread({}, headerGroup.getHeaderGroupProps()), {}, {\n        key: \"\".concat(headerGroup.id, \"hg\"),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }\n      }), headerGroup.headers.map(function (column) {\n        return /*#__PURE__*/_createElement(\"tr\", _objectSpread(_objectSpread({}, column.getHeaderProps()), {}, {\n          key: \"\".concat(column.id, \"col\"),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }\n        }), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: column.render('Header')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, _this));\n      }));\n    }), /*#__PURE__*/_jsxDEV(\"tbody\", _objectSpread(_objectSpread({}, getTableBodyProps()), {}, {\n      children: page.map(function (row) {\n        prepareRow(row);\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.cells.map(function (cell) {\n            return /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: cell.column.Header\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(\"td\", _objectSpread(_objectSpread({}, row.getRowProps()), {}, {\n                as: \"td\",\n                children: cell.render('Cell')\n              }), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 21\n              }, _this)]\n            }, \"\".concat(cell.column.id, \"Heading\"), true, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 19\n            }, _this);\n          })\n        }, \"\".concat(row.id, \"row\"), false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, _this);\n      })\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, _this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Bank, \"gsEiR/OBEDfKdRffGxky102wk2g=\", false, function () {\n  return [useTable];\n});\n\n_c = Bank;\n\nvar _c;\n\n$RefreshReg$(_c, \"Bank\");","map":{"version":3,"sources":["/home/anaramirez/Documentos/eng-recruiting/ims-bank/javascript/src/components/Bank.js"],"names":["React","useEffect","useState","useMemo","api","Column","CellProps","useTable","organizeClientsAccounts","Bank","transactions","setTransactions","clients","setClients","get","data","columns","Header","accessor","getTableProps","getTableBodyProps","headerGroups","page","map","headerGroup","getHeaderGroupProps","id","headers","column","getHeaderProps","render","row","prepareRow","cells","cell","getRowProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useMemo } from \"react\";\nimport api from '../services/api';\nimport { Column, CellProps, useTable } from 'react-table';\nimport { organizeClientsAccounts } from \"../helpers/clients\";\n\nexport const Bank = () => {\n  const [transactions, setTransactions] = useState([]);\n  const [clients, setClients] = useState([]);\n\n  useEffect(async () => {\n    const {data} = await api.get('transactions.json');\n    setTransactions(data)\n    setClients(organizeClientsAccounts(data));\n    \n  }, []);\n\n  \n  const columns = useMemo(\n    () => [\n      {\n        Header: \"Customer's name\",\n        accessor: 'name',\n      },\n      {\n        Header: \"Checking account total\",\n        accessor: 'checking',\n      },\n      {\n        Header: \"Saving account total\",\n        accessor: 'saving',\n      },\n    ],\n    [],\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page\n  } = useTable(\n    {\n      columns,\n      data: clients,\n    },\n  );\n\n  return (\n    <table {...getTableProps()}>\n      {headerGroups.map(headerGroup => (\n        <thead\n          {...headerGroup.getHeaderGroupProps()}\n          key={`${headerGroup.id}hg`}\n        >\n          {headerGroup.headers.map(column => (\n            <tr\n              {...column.getHeaderProps()}\n              key={`${column.id}col`}\n            >\n              <th>\n                {column.render('Header')}\n              </th>\n            </tr>\n          ))}\n        </thead>\n      ))}\n\n      <tbody {...getTableBodyProps()}>\n        {page.map((row) => {\n          prepareRow(row);\n          return (\n            <tr\n              key={`${row.id}row`}\n            >\n              {row.cells.map(cell => {\n                return (\n                  <React.Fragment key={`${cell.column.id}Heading`}>\n                    <td\n                    >\n                        {cell.column.Header}\n                    </td>\n                    <td\n                      {...row.getRowProps()}\n                      as=\"td\"\n                    >\n                        {cell.render('Cell')}\n                    </td>\n                  </React.Fragment>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n  </table>\n  )\n};\n"]},"metadata":{},"sourceType":"module"}